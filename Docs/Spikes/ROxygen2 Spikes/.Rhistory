# Reads into a string
page = readLines(url)
# Parses into xml
pageXML=xmlParse(page)
#print(pageXML)
# Turns it into data frame
pageFrame = xmlToDataFrame(pageXML)
xmlCount = length(pageFrame[,1])
for(item in pageFrame[,1])
print(item[1])
}
xml = function(keyword)
{
url = sprintf("https://www.sbir.gov/api/awards.xml?keyword=%s", keyword)
print(url)
page = readLines(url)
pageXML=xmlParse(page)
return (pageXML)
}
xml("cbinsights")
xmlSpike = function()
{
library("XML")
library("methods")
url = "https://www.sbir.gov/api/awards.xml?keyword=cbinsights"
# Reads into a string
page = readLines(url)
# Parses into xml
pageXML=xmlParse(page)
#print(pageXML)
# Turns it into data frame
pageFrame = xmlToDataFrame(pageXML)
xmlCount = length(pageFrame[,1])
for(item in pageFrame[,1])
print(item[1])
}
xml = function(keyword)
{
url = sprintf("https://www.sbir.gov/api/awards.xml?keyword=%s", keyword)
print(url)
trim(page) = readLines(url)
pageXML=xmlParse(page)
return (pageXML)
}
xml("cbinsights")
install.packages("devtools")
"as" + "df"
strcat("as", "df")
cat("as", "df")
cat("as", "df", "")
cat("as", "df", jpin="")
cat("as", "df", join="")
print(strcat)
cat
cat("as", "df", "gh")
cat("as", "df", "gh", sep="")
paset0("as", "df")
paste0("as", "df")
paste("as", "df")
ls()
make()
make clean()
clean()
this
this=""
should=""
work=""
ls()
rm()
ls()
library("jsonlite")
package.install("jsonlite")
install.package("jsonlite")
install.packages("jsonlite")
library("jsonlite")
url = "https://chronicdata.cdc.gov/api/views/5svk-8bnq/"
page = readLines(url)
page
fromJSON(page)
pageJS = fromJSON(page)
pageJS
pageJS$tableAuthor
names(pageJS)
pageJS$columns
pageJS$columns[1]
pageJS$columns[,1]
pageJS$columns
library("XML")
library("methods")
#url = "https://www.sbir.gov/api/awards.xml?keyword=cbinsights"
url = "https://chronicdata.cdc.gov/api/views/5svk-8bnq/rows.xml"
page = readLines(url)
ui = fluidPage("Hello World")
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
shinyApp(ui=ui, server=server)
ui = fluidPage("Hello World")
server = function(input, output)
{
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
shinyApp(ui=ui, server=server)
ui = fluidPage("Hello World")
server = function(input, output)
{
output$hist = renderPlot({})
}
shinyApp(ui=ui, server=server)
library("shiny")
ui = fluidPage("Hello World")
server = function(input, output)
{
output$hist = renderPlot({})
}
shinyApp(ui=ui, server=server)
# Defines the UI for the App
ui  = fluidPage(
#"Hello World"
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
# Defines Server Logic
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
# Creates Shiny App
shinyApp(ui=ui, server=server)
library("shiny")
hello.page = function()
{
ui = fluidPage("Hello World")
server = function(input, output)
{
output$hist = renderPlot({})
}
shinyApp(ui=ui, server=server)
}
hello.page()
slider.and.histogram.page = function()
{
# Defines the UI for the App
ui  = fluidPage(
#"Hello World"
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
# Defines Server Logic
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
# Creates Shiny App
shinyApp(ui=ui, server=server)
}
slider.and.hsitogram.page()
slider.and.histogram.page()
runExample("01_hello")
slider.and.histogram.page
paste0
ui = fluidPage("Hello World")
ui
fluidPage(
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
ui = fluidPage("Hello World")
server = function(input, output){}
shinyApp(ui=ui, server=server)
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100)
plotOutput("hist")
hist(rnorm(100))
source('~/Desktop/SDR/R API/R Shiny.R')
source('~/Desktop/SDR/R API/R Shiny.R', echo=TRUE)
source('~/Desktop/SDR/R API/R Shiny.R', echo=TRUE)
source('~/Desktop/SDR/R API/R Shiny.R', echo=TRUE)
#
#
install.packages('rsconnect')
rsconnect::setAccountInfo(name='apolinaro',
token='05CBA8CD6E2107FC332ED7FD1279EA21',
secret='<SECRET>')
rsconnect::setAccountInfo(name='apolinaro',
token='05CBA8CD6E2107FC332ED7FD1279EA21',
secret='yksYWC62QfJcWU9Mtp3qGu7ZH9YUkJGEjoX73R0P')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
source('~/Desktop/SDR/R API/R Shiny.R', echo=TRUE)
library("shiny")
# Simply displays "Hello World"
hello.page = function()
{
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
}
# Displays a slider and a histogram
# The slider affect the histogram's appearrance
slider.and.histogram.page = function()
{
ui  = fluidPage(
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
shinyApp(ui=ui, server=server)
}
hello.page.2 = function()
{
ui = fluidPage("Hello World")
server = function(input, output){}
shinyApp(ui=ui, server=server)
}
#hello.page()
#slider.and.histogram.page()
#runExample("01_hello")
# NOTES
# http://shiny.rstudio.com/
# http://shiny.rstudio.com/tutorial/
# Tutorial 3 parts: build Shiny app, customize reactions, customize appearance
# Shiny app is a delivery vehicle for R code
# App is an open R session
# When the web page changes, it reruns the R script
# For now, runs on your computer
# Can have a web server service the App, where anyone can acccess it through the cloud
# Need to make a UI
# UI is in HTML; is generated from R
# fluidPage() generates HTML from R Code (stores as a string)
# Need a set of R instructions
# Use the template to add things to the app
# Build apps around inputs and outputs
# simply add inputs w/ input functions in the UI
# Same w/ output functions
# both generates HTML code
# Input
# buttons, checkboxes, checkboxes, radio button, date input, date range, file input, numeric input, password input, select box, sliders, text input
# each input has an inputID to uniquely identify it
# inputs take a label; label="" for no input
# Output
# dataTable, html, omage, plot, table, text, ui
# each output has a unique outputId
# output simply adds in the space in the UI for the output function
# server must define how it behaves
# Server function rules:
# Save object to display in output$
# plotOutput("hist") => output$hist
# build objects w/ a render function
# Different render objects for different types of renders
# render function contains type of object to build and a code block that renders that object
# Use input values w/ input$
# sliderInput(inputId="num") => input$num
# Whenever an input$ changes, the output will be automatically updated
# Share apps
# replace the app w/ one that serves it on the cloud
# app must be in the same directory as any dependencies (ie. images, data sets)
# name app as app.R
# can place app in 2 files: named ui.R and server.R
# shinyApps.io is free to use and easy to use
# Can run the app in a viware pane
# ApolinarO.shinyapps.io
# library(rsconnect)
# rsconnect::deployApp('path/to/your/app')
# https://www.rstudio.com/products/rpackages/
# Packages: plumber <web API>, rshiny<web interface>, ggplot, test that, roxygen2 <documentation>, stringr, markdown
# Objective: create app that cobines data frames and selects columns and names
# select data frames to add
# then add columns from those data frames
# colBind(data frames)
source('~/Desktop/SDR/R API/R Shiny.R', echo=TRUE)
library("shiny")
# Simply displays "Hello World"
hello.page = function()
{
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
}
# Displays a slider and a histogram
# The slider affect the histogram's appearrance
slider.and.histogram.page = function()
{
ui  = fluidPage(
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
shinyApp(ui=ui, server=server)
}
hello.page.2 = function()
{
ui = fluidPage("Hello World")
server = function(input, output){}
shinyApp(ui=ui, server=server)
}
#hello.page()
slider.and.histogram.page()
library("shiny")
# Simply displays "Hello World"
hello.page = function()
{
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
}
# Displays a slider and a histogram
# The slider affect the histogram's appearrance
slider.and.histogram.page = function()
{
ui  = fluidPage(
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
shinyApp(ui=ui, server=server)
}
hello.page.2 = function()
{
ui = fluidPage("Hello World")
server = function(input, output){}
shinyApp(ui=ui, server=server)
}
#hello.page()
slider.and.histogram.page()
hello.page()
library("shiny")
# Simply displays "Hello World"
hello.page = function()
{
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
}
# Displays a slider and a histogram
# The slider affect the histogram's appearrance
slider.and.histogram.page = function()
{
ui  = fluidPage(
sliderInput(inputId="num", label="choose a number", value=25, min=1, max=100),
plotOutput("hist")
)
server = function(input, output){
output$hist = renderPlot({
title = paste0(input$num, " Random Numbers")
hist(rnorm(input$num), main=title)
})
}
shinyApp(ui=ui, server=server)
}
hello.page.2 = function()
{
ui = fluidPage("Hello World")
server = function(input, output){}
shinyApp(ui=ui, server=server)
}
#hello.page()
slider.and.histogram.page()
getwd()
setwd("~/Desktop/SDR/")
setwd("./R API")
getwd()
source('~/Desktop/SDR/R API/R Shiny.R', echo=TRUE)
source('~/Desktop/SDR/R API/R Get Web Info.R')
runApp()
system("ls")
library("shiny")
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
install.packages(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
system("ls")
system("cd ..")
system("ls")
system("cd ..; ls")
system("ls")
getwd()
setwd("..")
getwd()
system("ls")
setwd("./Automation\ Spikes/sample_app")
getwd()
system("ls")
library("shiny")
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
deployApp(appDir=getwd(), appName="sample_app_from_spikes", contenCategory="application", lint=T, launch.browser=T, upload=T)
library("rsconnect")
deployApp(appDir=getwd(), appName="sample_app_from_spikes", contenCategory="application", lint=T, launch.browser=T, upload=T)
library("shiny")
# Defines UI for the App
ui = fluidPage("Hello World")
# Defines server Logic
server = function(input, output){}
# Creates Shiny App
shinyApp(ui=ui, server=server)
library("rsconnect")
deployApp(appDir=getwd(), appName="sample_app_from_spikes", contentCategory="application", lint=T, launch.browser=T, upload=T)
setAccountInfo()
setAccountInfo()
rsconnect::setAccountInfo(name='apolinaro',
token='05CBA8CD6E2107FC332ED7FD1279EA21',
secret='<SECRET>')
rsconnect::setAccountInfo(name='apolinaro',
token='05CBA8CD6E2107FC332ED7FD1279EA21',
secret='<SECRET>')
rsconnect::setAccountInfo(name='apolinaro',
token='05CBA8CD6E2107FC332ED7FD1279EA21',
secret='yksYWC62QfJcWU9Mtp3qGu7ZH9YUkJGEjoX73R0P')
deployApp(appDir=getwd(), appName="sample_app_from_spikes", contentCategory="application", lint=T, launch.browser=T, upload=T)
system("ls")
setwd("~/Desktop/SDR/Spikes")
install.packages("roxygen2")
#' Add together two numbers
#'
#' @param x A number
#' @param y A number
#' @return The sum of \code{x} and \code{y}
#' @examples
#' add(1, 1)
#' add(10, 1)
add <- function(x, y) {
x + y
}
roxygen2::roxygenise()
#' Add together two numbers
#'
#' @param x A number
#' @param y A number
#' @return The sum of \code{x} and \code{y}
#' @examples
#' add(1, 1)
#' add(10, 1)
add <- function(x, y) {
x + y
}
#roxygen2::roxygenise()
roxygen2::roxygenise()
#' Add together two numbers
#'
#' @param x A number
#' @param y A number
#' @return The sum of \code{x} and \code{y}
#' @examples
#' add(1, 1)
#' add(10, 1)
add <- function(x, y) {
x + y
}
system("ls")
library(roxygen2)
roxygen2::roxygenise()
getwd()
setwd("./Desktop/SDR")
setwd("./Spikes/ROxy*")
setwd("./Spikes/ROxygen2\ Spikes*")
system("ls")
setwd("Docs")
setwd("RO*")
setwd("Spikes")
setwd("RO*")
system("ls")
setwd("./ROxygen2 Spikes")
system("ls")
roxygen2::roxygenise()
browseURL("google.com")
browseURL("https://www.google.com/")
browseURL("https://www.google.com/")
