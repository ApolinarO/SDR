animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(MASS)
data <- Auto
View(data)
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(MASS)
data <- Auto
View(data)
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
c
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
library(shiny)
library(MASS)
data <- Auto
View(data)
attach(data)
str(data)
summary(data)
max(data$year)
library(shiny)
library(MASS)
data <- Auto
View(data)
attach(data)
library(shiny)
library(MASS)
data <- Auto
#View(data)
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
attach(data)
data <- Auto
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
ui
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
library(shiny)
library(MASS)
data <- Auto
#View(data)
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(MASS)
data <- auto
#View(data)
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
View(data)
data <- Auto
library(shiny)
library(MASS)
data <- Auto
auto
Auto
library(shiny)
library(MASS)
Auto
library("MASS")
View(data)
View(Auto)
pakages.install("MASS")
packages.install("MASS")
install.packages("MASS")
library(shiny)
library(MASS)
Auto
library("shiny")
library("MASS")
data <- Auto
Auto
Auto
Auto
Auto
Auto
library(shiny)
library(MASS)
data <- Auto
library(ISLR)
install.packages("ISLR")
library(ISLR)
data <- Auto
runApp()
install.packages("ISLR")
shinyApp(ui = ui, server = server)
library(shiny)
shinyApp(ui = ui, server = server)
runApp()
install.packages("ISLR")
shiny::runApp()
library(shiny)
library(MASS)
library(ISLR)
install.packages("ISLR")
data <- Auto
View(data)
attach(data)
str(data)
summary(data)
max(data$year)
ui <- fluidPage(
titlePanel("AUTO DATASET"),
fluidRow(
column(4,
selectInput("model",
"Model:",
c("All",
unique(as.character(data$name))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(data$cylinders))))
),
column(4,
sliderInput("year", "Year:",
min = min(data$year), max = max(data$year),
value = 1, step = 1,
animate =
animationOptions(interval = 1, loop = TRUE))
)
),
fluidRow(
DT::dataTableOutput("table")
)
)
server<-
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- data
if (input$model != "All") {
data <- data[data$name == input$model,]
}
if (input$cyl != "All") {
data <- data[data$cyl == input$cyl,]
}
if (input$year != "All") {
data <- data[data$year == input$year,]
}
data
}))
}
shinyApp(ui = ui, server = server)
install.packages(DBI)
install.packages("DBI")
include("shiny");
include("DBI");
