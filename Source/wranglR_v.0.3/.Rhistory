shiny::runApp('C:/HOME/SDR/Source/File_Spike')
shiny::runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
?sapply
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
shiny::runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/Users/anton/AppData/Local/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/TempState/Downloads/merging.R')
library(ISLR)
library(dplyr)
package.install('ISLR')
install.packages('ISLR')
ISLR::Auto
auto <- ISLR::Auto
View(auto)
View(auto)
View(auto)
write.csv(auto,"auto.csv")
View(auto)
View(auto)
df <- auto
df$name <- NULL
auto <- ISLR::Auto
attach(auto)
df <- auto
df$name <- NULL
View(df)
model <- lm(mpg ~  data = df)
model <- lm(mpg ~ ., data = df)
fitted <- predict(model)
View(model)
fitted <- predict(model)
plot(mpg ~ fitted)
summary(model)
mse <- (predicted - fitted)^2
mse <- (mpg - fitted)^2
mse
mse <- sum((mpg - fitted)^2)/length(mpg)
mse
plot(model)
plot(model)
shiny::runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
output$UI_button <- insertUI(
selector = "#subset",
where = "afterEnd",
ui = sliderInput("int", x,
min = min(values), max = max(values),
value = c(min(values),max(values)))
) #end UI_Button
?sliderInput
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
?insertUI
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('R/test.R')
runApp('R/test.R')
runApp('C:/HOME/SDR/Source/File_Spike')
?select
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
?between
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/File_Spike')
shiny::runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
shiny::runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/File_Spike')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
shiny::runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
library(shiny); runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.2')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
load("C:/HOME/SDR/Source/wranglR_v.0.3/NHANES_CLEAN/rda21.rda")
load("C:/HOME/SDR/Source/wranglR_v.0.3/NHANES_CLEAN/rda21.rda")
library(shiny); runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
runApp('C:/HOME/SDR/Source/wranglR_v.0.3/ASDF.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(DT)
library("purrr")
library(ISLR)
ui <-
navbarPage("wranglR",
tabPanel("README",
h2("WELCOME TO wranglR release 1", align="center"),
p("Objective: To create an web application that will expedite the Data Wrangling Process"),
p("Data Selection section will allow you to upload a csv file and select columns"),
strong("NOTE: ROW SELECTION WILL BE IMPLEMENTED IN RELEASE 2"),
p("Data Merging section will allow you to merge multiple tables based on a common index"),
strong("NOTE: INDEX MUST BE FOUND THROUGHOUT ALL TABLES"),
p("Yet to come"),
HTML(" <ul>
<li>Row selection using slider input objects</li>
<li>Data stacking using rbind()</li>
</ul>"),
p("Download the data Here"),
downloadButton('downloadNHANES', 'Download NHANES'),
p("Dataset documentation"),
strong("DISCLAIMER: For this small, sanitized dataset, dataframe columns are consistent across all years"),
HTML("<ul>
<li><a href='https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/DEMO_H.htm'>Demographics</a></li>
<li><a href='https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/HEPC_H.htm'>Hepatitis C: RNA (HCV-RNA) and Hepatitis C Genotype </a></li>
<li><a href='https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/TRIGLY_H.htm'>Cholesterol - LDL & Triglycerides </a></li>
<li><a href='https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/HDL_H.htm'>Cholesterol - HDL</a></li>
<li><a href='https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/HIV_H.htm'>HIV Antibody Test</a></li>
<li><a href='https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/BMX_H.htm'>Body Measures</a></li>
</ul>")
)
,
tabPanel("Data Selection",
fluidRow(
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
#selectInput("col", "Select a column", character(0))
checkboxGroupInput("columns","Select Columns",character(0)),
actionButton("updateButton","Update View"),
textInput("dataName", "Name your file", width = "50%"),
downloadButton('downloadData', 'Download')
),
mainPanel(
DT::dataTableOutput("mytable1"),
textOutput("selected")
)
)
)
)
,
tabPanel("Data merging",
fluidRow(
sidebarLayout(
sidebarPanel(
fileInput("csvs", "Choose CSV File",multiple=TRUE),
textInput("dataName", "Name your file", width = "50%"),
downloadButton('downloadData2', 'Download')
),
mainPanel(
DT::dataTableOutput("table2")
)
)
)
)
)
server <- function(input, output, session) {
####	Sub Setting Data	####
###get and load data
data <- reactive({
inFile <- input$file
if (is.null(inFile)) return(NULL)
read.csv(inFile$datapath)
})
#output$mytable1 <- DT::renderDataTable({
# DT::datatable(mtcars, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
#})
#display output
output$mytable1 <- DT::renderDataTable({
df <- as.data.frame(data())
DT::datatable(df, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
#display and update column selection
observeEvent(data(), {
updateCheckboxGroupInput(session, "columns", choices = names(data()))
})
#use server to get information from the table
observeEvent(input$subset,{
df <- data.frame(data())
output$selected <- renderText(
#cols <- input$columns,
for (x in input$columns){
print(paste("this is ", x))
print(typeof(x)) #views ints as char??
}
)
})
#update the table
observeEvent(input$updateButton, {
df <- data.frame(data())
df <- subset(df, select = input$columns) #subsetting takes place here
# browser()
output$mytable1 <- DT::renderDataTable({
#req(df)
#head(df)
DT::datatable(df, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
})
datasetInput <- reactive({
df <- subset(data.frame(data()), select = input$columns)
})
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataName, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
#Merging
mycsvs<-reactive({
Reduce(function(x,y) merge(x, y, by = "seqn", all.x = TRUE, all.y = TRUE),lapply(input$csvs$datapath, read.csv))
})
output$table2 <- renderDataTable({
#req(mycsvs())
#head(mycsvs())
df <- as.data.frame(mycsvs())
DT::datatable(df, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
output$downloadData2 <- downloadHandler(
filename = function() {
paste(input$dataName, ".rda", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
#Stacking
#  rbind_sort_func <- function(...){
#   new_df1 <- (...)
#    new_df <- rbind(new_df1[1:length(...)])
#    print("New DF CReated")
#   str(new_df)
#sorted_data <- new_df[order(new_df$Order1),]
#return(sorted_data)
#    return(new_df[1])
# }
observeEvent(input$stack,{
print("test")
mycsvs1<-reactive({
A <- lapply(input$csvs1$datapath, read.csv)
print(str(A))
print("test1")
rbind_sort_func(lapply(input$csvs1$datapath, read.csv))
#print("test2")
})
output$table3 <- renderTable({
#req(mycsvs1())
#head(mycsvs1())
df <- as.data.frame(mycsvs1())
DT::datatable(df, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
})
output$downloadNHANES <- downloadHandler(
filename = function() {
"files.zip"
},
content = function(file) {
zip(zipfile=file, files="./NHANES_CLEAN")
}
)
}
shinyApp(ui, server)
system("open") .
system("open .")
shiny::runApp()
file.path(".", "NHANES_CLEAN")
list.files()
